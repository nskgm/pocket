#-----------------------------------------------------------
# config
#-----------------------------------------------------------
# C++バージョン
# 指定しない場合は0
CXX_VER = 3
# デバッグを有効にするか
DEBUG = true
# 警告を有効にするか
WARNING = true

# OpenGLバージョンdefine定義用
# 0以上で定義を追加
# MINORはバージョンごとにクランプ
# glewを使用している時は0, 0
# gl3やglcorearbなどを自前で使用する際に使用
# MAJOR, MINOR
GL_MAJOR, GL_MINOR = 0, 0

# OpenCLバージョン
# GLと同じ
CL_MAJOR, CL_MINOR = 0, 0

## %w() で空白ごとに文字列の配列を作成
## %i() で空白ごとにシンボルの配列を作成

# 出力実行ファイル名
# Windowsの場合は.exeが付く
EXECUTE_FILE = "main"
# 実行ファイル引数
# 文字列はダブルコーテーションは外して渡される
# ダブルコーテーションをつけるときは "\\\"NAME\\\""
EXECUTE_ARGS = [
	# 文字列配列
]
# システムインクルード法で検索が行われるディレクトリ
INC_DIRS = [
	# 文字列配列
	"inc"
]
# LIB_NAMESでのライブラリを参照する際に検索が行われるディレクトリ
LIB_DIRS = [
	# 文字列配列
	"lib"
]
# 使用するアーカイブ名
# libXXXX.a のXXXX部分のみ記述
# 依存するライブラリは後に記述する
# glfw3とglew32はgdi32に依存しているのでgdi32より前に記述
LIB_NAMES = [
	# 文字列配列
	"glew32",
	"glfw3",
	"gdi32",
	"opengl32",
]
# コンパイルする前に定義
DEFINES = [
	# 文字列配列
	"GLEW_STATIC", # glewを静的利用
]
# 事前定義に対しての値を設定
# 式をそのまま定義するときは文字列
# 文字列をそのまま定義するときは "\\\"VALUE\\\""
DEFINE_VALUES = {
	# 文字列に対して値
	# "DEFINE" => VALUE
	# "DEFINE" => "EXPRESSION"
	# "DEFINE" => "\\\"VALUE\\\""
}
# 事前にて定義を無効
UNDEFINES = [
	# 文字列配列
]
# その他gccオプション
# -は自動でつける
OPTIONS = [
	# 文字列配列
	#"mwindows", # ウィンドウズ用にビルド(コンソールを出さないように制御)
]
# Mac用Frameworkオプション
FRAMEWORKS = [
	# 主にglfw依存
	"Cocoa",
	"OpenGL",
	"IOKit",
	"CoreVideo"
]
# プリコンパイルを行なうヘッダ
# ファイル単体かディレクトリ指定
# ディレクトリ指定: "DIR/**"
PCH_HEADERS = [
	# 文字列配列
	#"pocket/math/**",
	#"pocket/gl/**"
]
# システム側
PCH_HEADERS_SYSTEM = [
	# 文字列配列
	#"vector",
]
# 必ずインクルードされるヘッダ
# プリコンパイル対象ヘッダを一つでも指定していた場合はPCH_FILEが必ず指定される
AUTO_INCLUDE_HEADERS = [
	# 文字列配列
	#"test.h"
]

#---------------------------------------------------------------------------------------------------------------------------------
# implementatioin
#---------------------------------------------------------------------------------------------------------------------------------
# プラットフォーム判定
require "rbconfig"
def os?
	# @http://qiita.com/Kumassy/items/491cbde86405cf002636

	host = RbConfig::CONFIG['host_os']
	case host
    when /mswin|msys|mingw|cygwin|bccwin|wince|emc/ then
		:windows
    when /darwin|mac os/ then
		:mac
    when /linux/ then
		:linux
    when /solaris|bsd/ then
		:unix
    else
		:unknown
	end
end
# OS判断用にキャッシュ
OS = os?.freeze

# ウィンドウズか
def windows?
	OS == :windows
end
# MacOSXか
def mac?
	OS == :mac
end
# Linuxか
def linux?
	OS == :linux
end
# Unixか
def unix?
	OS == :unix
end

BUILD_DIR = "build".freeze # ビルド用ディレクトリ
OBJ_DIR = "#{BUILD_DIR}/obj".freeze # 中間ファイル
DEP_DIR = "#{BUILD_DIR}/dep".freeze # 依存関係ファイル # dependencies
ASM_DIR = "#{BUILD_DIR}/asm".freeze # アセンブリファイル

# プリコンパイル用ファイル名
# ディレクトリ自動補間
PCH_FILE_NAME = "pch.h".freeze
# 実行ファイル名
EXECUTABLE_FILE_NAME = (windows? ? "#{EXECUTE_FILE}.exe" : EXECUTE_FILE).freeze

require "rake/clean"

# 削除対象ファイルorディレクトリ
# [EXECUTE_FILE, "**/*.o", "**/*.d", OBJ_DIR]
CLEAN_LIST = [EXECUTABLE_FILE_NAME, BUILD_DIR, PCH_FILE_NAME, "**/*.h.gch", "**/*.hpp.gch"]
CLEAN.include CLEAN_LIST
# clobberのほうではVCの設定ファイルもすべて削除
CLOBBER.include [CLEAN_LIST, "**/Debug", "**/Release", "**/x64", "**/*.VC.db"].flatten

## map簡略化
## map do |e| e.name end
## -> map &:name

# 配列から連結文字列を作成
def array_to_join_string(a, sep=" ")
	tmp = a.map do |e| yield e end if a.length > 0
	tmp.join sep if tmp != nil
end
# ハッシュから連結文字列を作成
def hash_to_join_string(a, sep=" ")
	tmp = a.map do |k, v| yield k, v end if a.length > 0
	tmp.join sep if tmp != nil
end
def to_pre_compile_option(a)
	# 文字列じゃない場合はそのまま
	return a unless a.kind_of? String
	"\\\"#{a}\\\""
end

#--------------------------------------------------------------------------------
# デフォルトタスク
#--------------------------------------------------------------------------------
desc "default: build run"
task :default => [:build, :run]

#--------------------------------------------------------------------------------
# 実行ファイルを作成
#--------------------------------------------------------------------------------
desc "build project."
task :build => [:make_directory, :pre_build, EXECUTABLE_FILE_NAME, :post_build]

#--------------------------------------------------------------------------------
# 実行ファイルを作成し直す
#--------------------------------------------------------------------------------
desc "rebuild project."
task :rebuild => [:clean, :build]

#--------------------------------------------------------------------------------
# 実行ファイルを実行
#--------------------------------------------------------------------------------
desc "execute #{EXECUTABLE_FILE_NAME}"
task :run do |t|
	command = (windows? ? "#{EXECUTABLE_FILE_NAME}" : "./#{EXECUTABLE_FILE_NAME}")

	# 実行ファイルの引数の連結
	args = array_to_join_string EXECUTE_ARGS do |e| e.to_s end
	command += " #{args}" if args != nil
	sh command, verbose: false
end

#--------------------------------------------------------------------------------
# ビルド用ディレクトリ作成
#--------------------------------------------------------------------------------
directory OBJ_DIR
directory DEP_DIR
directory ASM_DIR

dir_task_list = [OBJ_DIR, DEP_DIR, ASM_DIR]
# 実行ファイルのディレクトリ
EXEC_DIR = File.dirname EXECUTE_FILE
if EXEC_DIR != "." && EXEC_DIR != "./" && EXEC_DIR != "../"
	directory EXEC_DIR
	dir_task_list << EXEC_DIR
end
#desc "make directories #{dir_task_list}"
task :make_directory => dir_task_list # 全管理

#---------------------------------------------------------------------------------------------------------------------------------
# internal function
#---------------------------------------------------------------------------------------------------------------------------------
# 拡張子を変更
def replace_ext(path, ext)
	path.gsub File.extname(path), ext
end
# ファイル名をディレクトリ＋ファイル名の形で作成
def filepath(dir, path, suffix="")
	# / or \ を - に置き換えてパスを作成
	def replace(d, a, r, s)
		"#{d}/#{File.dirname(a).gsub r, "-"}-#{File.basename a, s}"
	end

	# ディレクトリが含まれている場合は文字列置換
	return replace dir, path, "/", suffix if path.index("/") != nil
	return replace dir, path, "\\", suffix if path.index("\\") != nil
	# 含まれない場合
	"#{dir}/#{File.basename path, suffix}"
end

# 依存ファイル出力ディレクトリ
def dep_filepath(s)
	#return replace_ext s, ".d" if PLACEMENT
	#"#{filepath(DEP_DIR, s, ".*")}.d"
	"#{filepath(DEP_DIR, s)}.d"
end
# 中間ファイル出力ディレクトリ
def obj_filepath(s)
	#return replace_ext s, ".o" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.o"
	"#{filepath(OBJ_DIR, s)}.o"
end
# アセンブラファイル出力ディレクトリ
def asm_filepath(s)
	#return replace_ext s, ".s" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.s"
	"#{filepath(ASM_DIR, s)}.s"
end

def adjust_cxx_version(v, version)
	# 3の場合は先頭に0をつける
	return "03" if v == 03
	# リストの中にあればそのまま
	return v if version.any? do |a| a == v end

	def rng?(v, a, b)
		v > a and v < b
	end
	return "0x" if rng? v, 3, 11
	return "1y" if rng? v, 11, 14
	return "1z" if rng? v, 14, 17
	nil
end

# 文字列から配列へ変換
def string_dep_to_array(string)
	# 邪魔な文字を削除
	deleted = string.delete "\\\\\n"
	# 空白で分割
	deps = deleted.split ' '
	# 空白などを削除
	deps.map do |e| e.strip end
end
# 配列からヘッダのみを抜き出す
def string_dep_to_headers(string)
	deps = string_dep_to_array string
	deps.slice 2...deps.length
end

# 依存関係の一時結果をヘッダーのみに変換
def exec_dep_to_headers(path)
	string_dep_to_headers `#{COMPILER} -E -MM #{path}`
end
# 保存されている依存関係の内容をヘッダーに変換
def load_dep_to_headers(path)
	string_dep_to_headers File.read(path)
end

def color_element(e)
	# カラーシーケンス文字を作成
	def color(num)
		"\e[01;#{num}m"
	end

	case e
	# 色を戻す
	when :reset, :default then
		color 0
	when :black then
		color 30
	when :red then
		color 31
	when :green then
		color 32
	when :yellow then
		color 33
	when :blue then
		color 34
	when :magenta then
		color 35
	when :cyan then
		color 36
	when :white then
		color 37
	else
		color 0
	end
end

# 色付きで標準出力へ出力
# c: 変えたい色
# d: 戻す色
def color_print_impl(c, d)
	print color_element(c)
	yield
	print color_element(d)
	STDOUT.flush
end
# 変えたい色に変更してブロックが終了したら標準に色に戻す
def color_print(c)
	color_print_impl c, :default do yield end
end

# 数値型にclamp関数を定義
class Numeric
	def clamp min, max
		[[self, max].min, min].max
	end
end

#---------------------------------------------------------------------------------------------------------------------------------
# internal config
#---------------------------------------------------------------------------------------------------------------------------------
# 調整後C++バージョン
CXX_VERSION = adjust_cxx_version(CXX_VER, [98, "03", "0x", 11, "1y", 14, "1z", 17]).freeze

# 対象コンパイラ
COMPILER = (mac? ? "g++-6" : "g++").freeze
# コンパイル対象拡張子
EXT_LIST = [".c", ".cpp", ".cxx"].freeze
# 拡張子に対するファイルの列挙
SOURCE_LIST = FileList[EXT_LIST.map do |e| "**/*#{e}" end]
# 中間ファイル
OBJ_LIST = SOURCE_LIST.map do |e| obj_filepath e end
# リリースを有効にするか
RELEASE = !DEBUG
# アセンブラを出力するか
ASSEMBLY = true

# 経過時間の計測
start_time = nil

# デバッグ時とリリース時のマクロ追加
defines_internal = DEFINES
defines_internal << "DEBUG" if DEBUG
defines_internal << "_DEBUG" if DEBUG
defines_internal << "NDEBUG" if RELEASE
undefines_internal = UNDEFINES
undefines_internal << "NDEBUG" if DEBUG
undefines_internal << "DEBUG" if RELEASE
undefines_internal << "_DEBUG" if RELEASE

def make_version(name, defs, mj, nmj, mn, mnmax)
	if mj < nmj
		# バージョンを超えている時はすべてを定義
		for i in 0..mnmax
			defs << "#{name}_VERSION_#{mj}_#{i}"
		end
	elsif mj == nmj
		# 同じ場合は指定minorまで
		minor = mn.clamp 0, mnmax
		for i in 0..minor
			defs << "#{name}_VERSION_#{mj}_#{i}"
		end
	end
end

# OpenGL define
if GL_MAJOR > 0 then
	major = GL_MAJOR.clamp 1, 4
	make_version "GL", defines_internal, 1, major, GL_MINOR, 5
	make_version "GL", defines_internal, 2, major, GL_MINOR, 1
	make_version "GL", defines_internal, 3, major, GL_MINOR, 3
	make_version "GL", defines_internal, 4, major, GL_MINOR, 5
end

if CL_MAJOR > 0 then
	major = CL_MAJOR.clamp 1, 2
	make_version "CL", defines_internal, 1, major, CL_MINOR, 2
	make_version "CL", defines_internal, 2, major, CL_MINOR, 2
end

# 事前に定義する配列
defines = array_to_join_string defines_internal do |e| "-D\"#{e}\"" end
define_values = hash_to_join_string DEFINE_VALUES do |k, v| "-D\"#{k}=#{v}\"" end
undefines = array_to_join_string undefines_internal do |e| "-U\"#{e}\"" end
# ライブラリ文字列の連結
inc = array_to_join_string INC_DIRS do |e| "-I\"#{e}\"" end
lib = array_to_join_string LIB_DIRS do |e| "-L\"#{e}\"" end
lib_name = array_to_join_string LIB_NAMES do |e| "-l\"#{e}\"" end
# その他オプション
options = array_to_join_string OPTIONS do |e| "-#{e}" end
# frameworkオプション
frameworks = array_to_join_string FRAMEWORKS do |e| "-framework\"#{e}\"" end
# 自動インクルートするファイル
auto_include = array_to_join_string AUTO_INCLUDE_HEADERS do |e| "-include\"#{e}\"" end

#--------------------------------------------------------------------------------
# ビルド前処理（実装）
#--------------------------------------------------------------------------------
task :pre_build do |t|
	# 開始時間取得
	start_time = Time.now
	# 依存関係ファイル
	dep_list = SOURCE_LIST.map do |e| dep_filepath e end
	# アセンブラファイル
	asm_list = SOURCE_LIST.map do |e| asm_filepath e end if ASSEMBLY

	# 事前にコンパイルするヘッダ
	if PCH_HEADERS.length > 0 then
		pch_headers = PCH_HEADERS.map do |e|
			# ディレクトリを指定しているか
			if /.+\/\*\*$/ =~ e then
				# ディレクトリを指定している場合は配列で返してあとで一次配列
				["#{e}.h", "#{e}.hpp"]
			else
				# ファイルはそのまま
				e
			end
		end
		# ファイルリストで拡張子に対するファイルを持ってくる
		pch = FileList[pch_headers.flatten.uniq]

		# ディレクトリ作成
		dir = File.dirname PCH_FILE_NAME
		directory(dir).invoke if dir != "."

		# プリコンパイルヘッダが設定されていたら専用ファイルを作成
		file PCH_FILE_NAME => pch do |t|
			# すでに存在している場合は削除
			File.unlink PCH_FILE_NAME if File.exist? PCH_FILE_NAME

			# ディレクトリが含まれている場合の相対パス用文字列
			count = PCH_FILE_NAME.count "/"
			count += PCH_FILE_NAME.count "\\"
			dir_depth = "../"*count if count > 0

			# 全てのファイルをインクルード
			#endl = windows? ? "\r\n" : "\n"
			endl = "\n"
			# BOM付き
			files = "\uFEFF#ifndef __POCKET_PRE_COMPILE_HEADERS_H__#{endl}#define __POCKET_PRE_COMPILE_HEADERS_H__#{endl*2}"
			files += array_to_join_string t.prerequisites, endl do |e|
				# すでに存在しているパスでは先頭ディレクトリ名を省く
				if e.match("^#{dir}/") != nil
					"#include \"#{e.slice dir.length+1...e.length}\""
				else
					# 別ディレクトリに存在している場合の相対パス
					if dir_depth != nil
						"#include \"#{dir_depth+e}\""
					else
						# 直に置かれている場合
						"#include \"#{e}\""
					end
				end
			end
			files += "#{endl*2}" if PCH_HEADERS_SYSTEM.length > 0
			files += array_to_join_string PCH_HEADERS_SYSTEM, endl do |e|
				"#include <#{e}>"
			end if PCH_HEADERS_SYSTEM.length > 0
			files += "#{endl*2}#endif // __POCKET_PRE_COMPILE_HEADERS_H__#{endl}"
			File.write PCH_FILE_NAME, files

			# プリコンパイル用バイナリファイル作成
			command = "#{COMPILER} #{PCH_FILE_NAME}"
			command += " #{defines}" if defines != nil # 事前定義
			command += " #{define_values}" if define_values != nil # 事前定義+値
			command += " #{undefines}" if undefines != nil # 事前定義無効
			command += " #{inc}" if inc != nil
			sh command
		end
		file(PCH_FILE_NAME).invoke

		# 自動でインクルードするように設定
		add_include_cmd = "-include\"#{PCH_FILE_NAME}\""
		if auto_include == nil then
			auto_include = add_include_cmd
		else
			auto_include += " #{add_include_cmd}"
		end

		#pch_cpp_file = pch_file.gsub ".h", ".cpp"
		#file pch_cpp_file => pch_file do
		#	# 存在していない場合はヘッダをインクルードするだけのソースファイルを作成
		#	unless File.exist? pch_cpp_file then
		#		File.write pch_cpp_file, "#include \"pch.h\"\n"
		#	end
		#	# ヘッダーが変更されているので再コンパイル
		#	sh "#{COMPILER} -o #{obj_filepath pch_cpp_file} -c #{pch_cpp_file}"
		#end
		#file(pch_cpp_file).invoke
	end

	# コンパイル時に付加されるコマンド事前作成
	add_cmd = ""
	add_cmd += " -std=c++#{CXX_VERSION}" if CXX_VERSION != nil
	add_cmd += " -W\"all\" -W\"extra\" -W\"cast-qual\"" if WARNING # 警告
	add_cmd += " -w" unless WARNING # 警告をすべて無効
	add_cmd += " -g" if DEBUG # デバッグ情報をつける
	add_cmd += " -O2 -march=native" if RELEASE # 最高の最適化＋コンパイルマシン最適化
	add_cmd += " #{auto_include}" if auto_include != nil # 自動でインクルードするファイル
	add_cmd += " #{defines}" if defines != nil # 事前定義
	add_cmd += " #{define_values}" if define_values != nil # 事前定義+値
	add_cmd += " #{undefines}" if undefines != nil # 事前定義無効
	add_cmd += " #{inc}" if inc != nil # システムinclude
	#add_cmd += " #{lib}" if lib != nil # システムlibrary
	#add_cmd += " #{lib_name}" if lib_name != nil # 使用ライブラリ名
	#add_cmd += " #{frameworks}" if frameworks != nil # frameworkオプション
	add_cmd += " #{options}" if options != nil # その他オプション

	# ファイルタスクを生成
	for i in 0...SOURCE_LIST.length
		src_file = SOURCE_LIST[i] # ソースファイル
		obj_file = OBJ_LIST[i] # 中間ファイル
		dep_file = dep_list[i] # 依存関係ファイル
		asm_file = asm_list[i] if ASSEMBLY
		# タスクが実行されたか
		is_dep = false

		# 現在のコンパイルしているソースファイルを紅色で出力
		color_print :green do
			print "-- #{src_file}\n"
		end

		# ソースが変更されていたら依存関係ファイルを更新する
		dep_cmd = "#{COMPILER} #{src_file} -E -MM -MT #{obj_file} -MF #{dep_file}"
		file dep_file => src_file do
			# -MM システムinclude以外の依存include
			# -MT 中間ファイルターゲット名
			# -MF 出力ファイルパス
			command = dep_cmd
			command += " #{inc}" if inc != nil
			sh command
			is_dep = true
		end
		file(dep_file).invoke

		# 依存ヘッダー配列
		headers = load_dep_to_headers dep_file

		# ソースが変更されていない場合はヘッダが依存しているヘッダーを見る
		if !is_dep && headers.length > 0 then
			file dep_file => headers do
				sh dep_cmd
				# 同じもの読み込み防止
				is_dep = true
			end
			file(dep_file).invoke
			# 実行されたらもう一度読み込み
			headers = load_dep_to_headers dep_file if is_dep
		end

		# ソースと依存しているヘッダを見て中間ファイルを作成
		file obj_file => [src_file, headers].flatten do |t|
			# 実行するシェルコマンド
			# -x c++
			command = "#{COMPILER} -c #{src_file} -o #{obj_file}#{add_cmd}"
			# シェル実行
			sh command

			# アセンブラファイル作成
			next unless ASSEMBLY
			command += " -S"
			command.gsub! obj_file, asm_file
			sh command
		end
		file(obj_file).invoke
	end
end

#--------------------------------------------------------------------------------
# ビルド後処理
#--------------------------------------------------------------------------------
task :post_build do
	next if start_time == nil

	color_print :magenta do
		line = "#{"-"*50}\n"
		print line
		print "build time: #{Time.now - start_time}s\n"
		print line
	end

	start_time = nil
end

#--------------------------------------------------------------------------------
# ソースファイルのタイムスタンプ更新
#--------------------------------------------------------------------------------
task :touch do
	# Windowsの場合はcopyコマンドを代用
	# メッセージは邪魔なので破棄
	proc = windows? ? Proc.new{ |n| sh "copy /B #{n} +,, > nul" } : Proc.new{ |n| sh "touch #{n}" }
	# シェルの実行を標示させない
	verbose false do
		SOURCE_LIST.each do |name|
			proc.call name
		end
	end
end

#--------------------------------------------------------------------------------
# 実行ファイル作成
#--------------------------------------------------------------------------------
file EXECUTABLE_FILE_NAME => OBJ_LIST do |t|
	color_print :green do
		print "\n-- #{EXECUTABLE_FILE_NAME}\n"
	end

	command = "#{COMPILER} -o #{EXECUTABLE_FILE_NAME} #{t.prerequisites.join " "}"
	command += " #{auto_include}" if auto_include != nil
	command += " #{defines}" if defines != nil
	command += " #{define_values}" if define_values != nil
	command += " #{undefines}" if undefines != nil
	command += " #{inc}" if inc != nil
	command += " #{lib}" if lib != nil
	command += " #{lib_name}" if lib_name != nil
	command += " #{frameworks}" if frameworks != nil && mac?
	command += " #{options}" if options != nil
	sh command
end
