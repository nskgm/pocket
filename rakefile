#-----------------------------------------------------------
# config
#-----------------------------------------------------------

# C++バージョン
# 指定しない場合は0
CXX_VER = 11
# デバッグを有効にするか
DEBUG = false
# 警告を有効にするか
WARNING = true

# 出力実行ファイル名
EXECUTE_FILE = "main.exe"
# 実行ファイル引数
# 文字列はダブルコーテーションは外して渡される
# ダブルコーテーションをつけるときは "\\\"NAME\\\""
EXECUTE_ARGS = [
	"Hello",
	2
]
# ライブラリディレクトリ
INC_DIRS = [
	# 文字列配列
	"inc/gl"
]
LIB_DIRS = [
	# 文字列配列
	"lib"
]
# 使用するアーカイブ名
LIBRARIES = [
	# 文字列配列
]
# 事前に定義
DEFINES = [
	# 文字列配列
]
# 事前定義に対しての値を設定
# 文字列で渡した場合は文字列で定義される
DEFINE_VALUES = {
	# 文字列に対して値
}
# 事前にて定義を無効
UNDEFINES = [
	# 文字列配列
]

#---------------------------------------------------------------------------------------------------------------------------------
# implementatioin
#---------------------------------------------------------------------------------------------------------------------------------
require "rake/clean"
BUILD_DIR = "builds" # ビルド用ディレクトリ
OBJ_DIR = "#{BUILD_DIR}/obj" # 中間ファイル
DEP_DIR = "#{BUILD_DIR}/dep" # 依存関係ファイル # dependencies
ASM_DIR = "#{BUILD_DIR}/asm" # アセンブリファイル

# 削除対象ファイルorディレクトリ
# [EXECUTE_FILE, "**/*.o", "**/*.d", OBJ_DIR]
CLEAN_LIST = [EXECUTE_FILE, BUILD_DIR]
CLEAN.include CLEAN_LIST
CLOBBER.include CLEAN_LIST

# 配列から連結文字列を作成
def array_to_join_string(a, sep=" ")
	tmp = a.map do |e| yield e end if a.length > 0
	tmp.join sep if tmp != nil
end
# ハッシュから連結文字列を作成
def hash_to_join_string(a, sep=" ")
	tmp = a.map do |k, v| yield k, v end if a.length > 0
	tmp.join sep if tmp != nil
end
def to_pre_compile_option(a)
	# 文字列じゃない場合はそのまま
	return a unless a.kind_of? String
	"\\\"#{a}\\\""
end

#--------------------------------------------------------------------------------
# デフォルトタスク
#--------------------------------------------------------------------------------
desc "default: build_and_run"
task :default => [:build_and_run]

#--------------------------------------------------------------------------------
# 実行ファイルを作成
#--------------------------------------------------------------------------------
desc "build #{EXECUTE_FILE}"
task :build => [:make_directory, :pre_build, EXECUTE_FILE, :post_build]

#--------------------------------------------------------------------------------
# 実行ファイルを作成し直す
#--------------------------------------------------------------------------------
desc "rebuild #{EXECUTE_FILE}"
task :rebuild => [:clean, :build]

#--------------------------------------------------------------------------------
# 実行ファイルを実行
#--------------------------------------------------------------------------------
desc "execute #{EXECUTE_FILE}"
task :run do |t|
	command = "#{EXECUTE_FILE}"

	# 実行ファイルの引数の連結
	args = array_to_join_string EXECUTE_ARGS do |e| e end
	command += " #{args}" if args != nil
	sh command
end

#--------------------------------------------------------------------------------
# 実行ファイルを作成して実行
#--------------------------------------------------------------------------------
desc "build and run: #{EXECUTE_FILE}"
task :build_and_run => [:build, :run]

#--------------------------------------------------------------------------------
# 実行ファイルを作成し直して実行
#--------------------------------------------------------------------------------
desc "rebuild and run: #{EXECUTE_FILE}"
task :rebuild_and_run => [:rebuild, :run]

#--------------------------------------------------------------------------------
# ビルド用ディレクトリ作成
#--------------------------------------------------------------------------------
directory BUILD_DIR
directory OBJ_DIR => BUILD_DIR
directory DEP_DIR => BUILD_DIR
directory ASM_DIR => BUILD_DIR
task :make_directory => [BUILD_DIR, OBJ_DIR, DEP_DIR, ASM_DIR] # 全管理

# 拡張子を変更
def replace_ext(path, ext)
	path.gsub File.extname(path), ext
end
# ファイル名をディレクトリ＋ファイル名の形で作成
def filepath(dir, path, suffix="")
	# / or \ を - に置き換えてパスを作成
	def replace(d, a, r, s)
		"#{d}/#{File.dirname(a).gsub(r, "-")}-#{File.basename(a, s)}"
	end

	# ディレクトリが含まれている場合は文字列置換
	return replace(dir, path, "/", suffix) if path.index("/") != nil
	return replace(dir, path, "\\", suffix) if path.index("\\") != nil
	# 含まれない場合
	"#{dir}/#{File.basename(path, suffix)}"
end

# 依存ファイル出力ディレクトリ
def dep_filepath(s)
	#return replace_ext s, ".d" if PLACEMENT
	#"#{filepath(DEP_DIR, s, ".*")}.d"
	"#{filepath(DEP_DIR, s)}.d"
end
# 中間ファイル出力ディレクトリ
def obj_filepath(s)
	#return replace_ext s, ".o" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.o"
	"#{filepath(OBJ_DIR, s)}.o"
end
# アセンブラファイル出力ディレクトリ
def asm_filepath(s)
	#return replace_ext s, ".s" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.s"
	"#{filepath(ASM_DIR, s)}.s"
end

def adjust_cxx_version(v)
	# 3の場合は先頭に0をつける
	return "03" if v == 03
	# リストの中にあればそのまま
	return v if CXX_VER_LIST.any? do |a| a == v end

	def rng(v, a, b)
		v > a and v < b
	end
	return "0x" if rng v, 3, 11
	return "1y" if rng v, 11, 14
	return "1z" if v > 14
	"03"
end

# 依存関係ファイルを配列として読み込む
def load_dep_from_file(path)
	# ファイル全体取得
	all = File.read path
	# 邪魔な文字を削除
	["\\", "\n"].each do |s| all.delete! s end
	# 空白で分割
	deps = all.split ' '
	# 空白などを削除
	deps.map do |e| e.strip end
end
# ヘッダーのみへ変換
def dep_to_headers_from_file(path)
	# 依存関係ファイルを読み込む
	deps = load_dep_from_file path
	deps.slice 2..deps.length
end

#--------------------------------------------------------------------------------
# 内部設定
#--------------------------------------------------------------------------------

# C++バージョンの調整
CXX_VER_LIST = [98, 11, 14, 17]
# 調整後C++バージョン
CXX_VERSION = adjust_cxx_version CXX_VER

# 対象コンパイラ
COMPILER = "g++"
# コンパイル対象拡張子
EXT_LIST = [".c", ".cpp", ".cxx"]
# 拡張子に対するファイルの列挙
SOURCE_LIST = FileList[EXT_LIST.map do |e| "**/*#{e}" end]
# 中間ファイル
OBJ_LIST = SOURCE_LIST.map do |e| obj_filepath e end
# リリースを有効にするか
RELEASE = !DEBUG
# アセンブラを出力するか
ASSEMBLY = true

# 経過時間の計測
start_time = nil

#--------------------------------------------------------------------------------
# ビルド前処理（実装）
#--------------------------------------------------------------------------------
task :pre_build do |t|
	# 開始時間取得
	start_time = Time.now

	# 依存関係ファイル
	dep_list = SOURCE_LIST.map do |e| dep_filepath e end
	# アセンブラファイル
	asm_list = SOURCE_LIST.map do |e| asm_filepath e end if ASSEMBLY

	# 事前に定義する配列
	defines = array_to_join_string DEFINES do |e| "-D\"#{e}\"" end
	define_values = hash_to_join_string DEFINE_VALUES do |k, v| "-D\"#{k}=#{to_pre_compile_option v}\"" end
	undefines = array_to_join_string UNDEFINES do |e| "-U\"#{e}\"" end
	# ライブラリ文字列の連結
	inc = array_to_join_string INC_DIRS do |e| "-I\"#{e}\"" end
	lib = array_to_join_string LIB_DIRS do |e| "-L\"#{e}\"" end
	libs = array_to_join_string LIBRARIES do |e| "-l\"#{e}\"" end

	# ファイルタスクを生成
	for i in 0...SOURCE_LIST.length
		src_file = SOURCE_LIST[i] # ソースファイル
		obj_file = OBJ_LIST[i] # 中間ファイル
		dep_file = dep_list[i] # 依存関係ファイル
		asm_file = asm_list[i] if ASSEMBLY
		# タスクが実行されたか
		is_dep = false

		# ソースが変更されていたら依存関係ファイルを更新する
		file dep_file => src_file do
			# -MM システムinclude以外の依存include
			# -MT 中間ファイルターゲット名
			# -MF 出力ファイルパス
			sh "#{COMPILER} -E -MM -MT #{obj_file} -MF #{dep_file} #{src_file}"
			is_dep = true
		end
		file(dep_file).invoke

		# 依存ヘッダー配列
		headers = dep_to_headers_from_file dep_file

		# ソースが変更されていない場合はヘッダが依存しているヘッダーを見る
		unless is_dep then
			file dep_file => headers do
				sh "#{COMPILER} -E -MM -MT #{obj_file} -MF #{dep_file} #{src_file}"
				is_dep = true
			end
			file(dep_file).invoke
			if is_dep then
				headers = dep_to_headers_from_file dep_file
			end
		end

		# ソースと依存しているヘッダを見て中間ファイルを作成
		file obj_file => [src_file, headers].flatten do |t|
			# 実行するシェルコマンド
			command = "#{COMPILER} -c #{src_file} -o #{obj_file}"
			command += " -std=c++#{CXX_VERSION}" if CXX_VER > 0
			command += " -Wall -Wextra -Wcast-qual" if WARNING # 警告
			command += " -w" unless WARNING # 警告をすべて無効
			command += " -g" if DEBUG # デバッグ情報をつける
			command += " -O2 -march=native" if RELEASE # 最高の最適化＋コンパイルマシン最適化
			command += " #{inc}" if inc != nil # システムinclude
			command += " #{lib}" if lib != nil # システムlibrary
			command += " #{libs}" if libs != nil
			command += " #{defines}" if defines != nil # 事前定義
			command += " #{define_values}" if define_values != nil # 事前定義+値
			command += " #{undefines}" if undefines != nil # 事前定義無効
			# シェル実行
			sh command

			next unless ASSEMBLY
			# デバッグではアセンブラファイル作成
			command += " -S"
			command.gsub! obj_file, asm_file
			sh command
		end
		file(obj_file).invoke
	end
end

#--------------------------------------------------------------------------------
# ビルド後処理
#--------------------------------------------------------------------------------
task :post_build do
	next if start_time == nil

	line = "#{"-"*50}\n"
	print line
	print "compile time: #{Time.now - start_time}s\n"
	print line

	start_time = nil
end

#--------------------------------------------------------------------------------
# 実行ファイル作成
#--------------------------------------------------------------------------------
file EXECUTE_FILE => OBJ_LIST do |t|
	# 中間ファイル名リスト
	#obj_list = t.prerequisites.map do |n| obj_filepath n end
	command = "#{COMPILER} -o #{EXECUTE_FILE} #{t.prerequisites.join(" ")}"
	sh command
end
