#-----------------------------------------------------------
# config
#-----------------------------------------------------------
# C++バージョン
# 指定しない場合は0
CXX_VER = 11
# デバッグを有効にするか
DEBUG = true
# 警告を有効にするか
WARNING = true

# 出力実行ファイル名
EXECUTE_FILE = "main.exe"
# 実行ファイル引数
# 文字列はダブルコーテーションは外して渡される
# ダブルコーテーションをつけるときは "\\\"NAME\\\""
EXECUTE_ARGS = [

]
# システムインクルード法で検索が行われるディレクトリ
INC_DIRS = [
	# 文字列配列
	"inc"
]
# LIB_NAMESでのライブラリを参照する際に検索が行われるディレクトリ
LIB_DIRS = [
	# 文字列配列
	"lib"
]
# 使用するアーカイブ名
# libXXXX.a のXXXX部分のみ記述
# 依存するライブラリは後に記述する
# glfw3とglew32はgdi32に依存しているのでgdi32より前に記述
LIB_NAMES = [
	# 文字列配列
	#"glew32",
	#"glfw3",
	#"gdi32",
	#"opengl32",
]
# コンパイルする前に定義
DEFINES = [
	# 文字列配列
	#"GLEW_STATIC", # glewを静的利用
]
# 事前定義に対しての値を設定
# 式をそのまま定義するときは文字列
# 文字列をそのまま定義するときは "\\\"VALUE\\\""
DEFINE_VALUES = {
	# 文字列に対して値
	# "DEFINE" => VALUE
	# "DEFINE" => "EXPRESSION"
	# "DEFINE" => "\\\"VALUE\\\""
}
# 事前にて定義を無効
UNDEFINES = [
	# 文字列配列
]
# その他gccオプション
# -は自動でつける
OPTIONS = [
	# 文字列配列
	#"mwindows", # ウィンドウズ用にビルド(コンソールを出さないように制御)
]
# プリコンパイルを行なうヘッダ
# ファイル単体かディレクトリ指定
# ディレクトリ指定: "DIR/**"
PCH_HEADERS = [
	# 文字列配列
	#"a/**",
	#"test.h"
	#"pocket/math/**"
]
# 必ずインクルードされるヘッダ
AUTO_INCLUDE_HEADERS = [
	# 文字列配列
	#"test.h"
]

#---------------------------------------------------------------------------------------------------------------------------------
# implementatioin
#---------------------------------------------------------------------------------------------------------------------------------
require "rake/clean"
BUILD_DIR = "builds" # ビルド用ディレクトリ
OBJ_DIR = "#{BUILD_DIR}/obj" # 中間ファイル
DEP_DIR = "#{BUILD_DIR}/dep" # 依存関係ファイル # dependencies
ASM_DIR = "#{BUILD_DIR}/asm" # アセンブリファイル

# 削除対象ファイルorディレクトリ
# [EXECUTE_FILE, "**/*.o", "**/*.d", OBJ_DIR]
CLEAN_LIST = [EXECUTE_FILE, BUILD_DIR, "**/*.h.gch", "**/*.hpp.gch"]
CLEAN.include CLEAN_LIST
CLOBBER.include CLEAN_LIST

# 配列から連結文字列を作成
def array_to_join_string(a, sep=" ")
	tmp = a.map do |e| yield e end if a.length > 0
	tmp.join sep if tmp != nil
end
# ハッシュから連結文字列を作成
def hash_to_join_string(a, sep=" ")
	tmp = a.map do |k, v| yield k, v end if a.length > 0
	tmp.join sep if tmp != nil
end
def to_pre_compile_option(a)
	# 文字列じゃない場合はそのまま
	return a unless a.kind_of? String
	"\\\"#{a}\\\""
end

#--------------------------------------------------------------------------------
# デフォルトタスク
#--------------------------------------------------------------------------------
desc "default: build_and_run"
task :default => [:build_and_run]

#--------------------------------------------------------------------------------
# 実行ファイルを作成
#--------------------------------------------------------------------------------
desc "build #{EXECUTE_FILE}"
task :build => [:make_directory, :pre_build, EXECUTE_FILE, :post_build]

#--------------------------------------------------------------------------------
# 実行ファイルを作成し直す
#--------------------------------------------------------------------------------
desc "rebuild #{EXECUTE_FILE}"
task :rebuild => [:clean, :build]

#--------------------------------------------------------------------------------
# 実行ファイルを実行
#--------------------------------------------------------------------------------
desc "execute #{EXECUTE_FILE}"
task :run do |t|
	command = "#{EXECUTE_FILE}"

	# 実行ファイルの引数の連結
	args = array_to_join_string EXECUTE_ARGS do |e| e.to_s end
	command += " #{args}" if args != nil
	sh command
end

#--------------------------------------------------------------------------------
# 実行ファイルを作成して実行
#--------------------------------------------------------------------------------
desc "build and run: #{EXECUTE_FILE}"
task :build_and_run => [:build, :run]

#--------------------------------------------------------------------------------
# 実行ファイルを作成し直して実行
#--------------------------------------------------------------------------------
desc "rebuild and run: #{EXECUTE_FILE}"
task :rebuild_and_run => [:rebuild, :run]

#--------------------------------------------------------------------------------
# ビルド用ディレクトリ作成
#--------------------------------------------------------------------------------
directory BUILD_DIR
directory OBJ_DIR => BUILD_DIR
directory DEP_DIR => BUILD_DIR
directory ASM_DIR => BUILD_DIR
task :make_directory => [BUILD_DIR, OBJ_DIR, DEP_DIR, ASM_DIR] # 全管理

# 拡張子を変更
def replace_ext(path, ext)
	path.gsub File.extname(path), ext
end
# ファイル名をディレクトリ＋ファイル名の形で作成
def filepath(dir, path, suffix="")
	# / or \ を - に置き換えてパスを作成
	def replace(d, a, r, s)
		"#{d}/#{File.dirname(a).gsub r, "-"}-#{File.basename a, s}"
	end

	# ディレクトリが含まれている場合は文字列置換
	return replace dir, path, "/", suffix if path.index("/") != nil
	return replace dir, path, "\\", suffix if path.index("\\") != nil
	# 含まれない場合
	"#{dir}/#{File.basename path, suffix}"
end

# 依存ファイル出力ディレクトリ
def dep_filepath(s)
	#return replace_ext s, ".d" if PLACEMENT
	#"#{filepath(DEP_DIR, s, ".*")}.d"
	"#{filepath(DEP_DIR, s)}.d"
end
# 中間ファイル出力ディレクトリ
def obj_filepath(s)
	#return replace_ext s, ".o" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.o"
	"#{filepath(OBJ_DIR, s)}.o"
end
# アセンブラファイル出力ディレクトリ
def asm_filepath(s)
	#return replace_ext s, ".s" if PLACEMENT
	#"#{filepath(OBJ_DIR, s, ".*")}.s"
	"#{filepath(ASM_DIR, s)}.s"
end

def adjust_cxx_version(v, version)
	# 3の場合は先頭に0をつける
	return "03" if v == 03
	# リストの中にあればそのまま
	return v if version.any? do |a| a == v end

	def rng(v, a, b)
		v > a and v < b
	end
	return "0x" if rng v, 3, 11
	return "1y" if rng v, 11, 14
	return "1z" if rng v, 14, 17
	"03"
end

# 文字列から配列へ変換
def string_dep_to_array(string)
	# 邪魔な文字を削除
	deleted = string.delete "\\\\\n"
	# 空白で分割
	deps = deleted.split ' '
	# 空白などを削除
	deps.map do |e| e.strip end
end
# 配列からヘッダのみを抜き出す
def string_dep_to_headers(string)
	deps = string_dep_to_array string
	deps.slice 2..deps.length
end

# 依存関係の一時結果をヘッダーのみに変換
def exec_dep_to_headers(path)
	string_dep_to_headers `#{COMPILER} -E -MM #{path}`
end
# 保存されている依存関係の内容をヘッダーに変換
def load_dep_to_headers(path)
	string_dep_to_headers File.read(path)
end


def color_element(e)
	# カラーシーケンス文字を作成
	def color(num)
		"\e[01;#{num}m"
	end

	case e
	# 色を戻す
	when :reset, :default then
		color 0
	when :black then
		color 30
	when :red then
		color 31
	when :green then
		color 32
	when :yellow then
		color 33
	when :blue then
		color 34
	when :magenta then
		color 35
	when :cyan then
		color 36
	when :white then
		color 37
	else
		color 0
	end
end

# 色付きで標準出力へ出力
# c: 変えたい色
# d: 戻す色
def color_print_impl(c, d)
	print color_element(c)
	yield
	print color_element(d)
end
# 変えたい色に変更してブロックが終了したら標準に色に戻す
def color_print(c)
	color_print_impl c, :default do yield end
end

#--------------------------------------------------------------------------------
# 内部設定
#--------------------------------------------------------------------------------

# 調整後C++バージョン
CXX_VERSION = adjust_cxx_version CXX_VER, [98, 03, "0x", 11, "1y", 14, "1z", 17]

# 対象コンパイラ
COMPILER = "g++"
# コンパイル対象拡張子
EXT_LIST = [".c", ".cpp", ".cxx"]
# 拡張子に対するファイルの列挙
SOURCE_LIST = FileList[EXT_LIST.map do |e| "**/*#{e}" end]
# 中間ファイル
OBJ_LIST = SOURCE_LIST.map do |e| obj_filepath e end
# リリースを有効にするか
RELEASE = !DEBUG
# アセンブラを出力するか
ASSEMBLY = true

# 経過時間の計測
start_time = nil

# 事前に定義する配列
defines = array_to_join_string DEFINES do |e| "-D\"#{e}\"" end
define_values = hash_to_join_string DEFINE_VALUES do |k, v| "-D\"#{k}=#{v}\"" end
undefines = array_to_join_string UNDEFINES do |e| "-U\"#{e}\"" end
# ライブラリ文字列の連結
inc = array_to_join_string INC_DIRS do |e| "-I\"#{e}\"" end
lib = array_to_join_string LIB_DIRS do |e| "-L\"#{e}\"" end
lib_name = array_to_join_string LIB_NAMES do |e| "-l\"#{e}\"" end
# その他オプション
options = array_to_join_string OPTIONS do |e| "-#{e}" end
# 自動インクルートするファイル
auto_include = array_to_join_string AUTO_INCLUDE_HEADERS do |e| "-include \"#{e}\"" end

#--------------------------------------------------------------------------------
# ビルド前処理（実装）
#--------------------------------------------------------------------------------
task :pre_build do |t|
	# 開始時間取得
	start_time = Time.now
	# 依存関係ファイル
	dep_list = SOURCE_LIST.map do |e| dep_filepath e end
	# アセンブラファイル
	asm_list = SOURCE_LIST.map do |e| asm_filepath e end if ASSEMBLY

	# コンパイル時に付加されるコマンド
	addition_command = ""
	addition_command += " -std=c++#{CXX_VERSION}" if CXX_VER > 0
	addition_command += " -Wall -Wextra -Wcast-qual" if WARNING # 警告
	addition_command += " -w" unless WARNING # 警告をすべて無効
	addition_command += " -g" if DEBUG # デバッグ情報をつける
	addition_command += " -O2 -march=native" if RELEASE # 最高の最適化＋コンパイルマシン最適化
	addition_command += " #{auto_include}" if auto_include != nil # 自動でインクルードするファイル
	addition_command += " #{defines}" if defines != nil # 事前定義
	addition_command += " #{define_values}" if define_values != nil # 事前定義+値
	addition_command += " #{undefines}" if undefines != nil # 事前定義無効
	addition_command += " #{inc}" if inc != nil # システムinclude
	addition_command += " #{lib}" if lib != nil # システムlibrary
	addition_command += " #{lib_name}" if lib_name != nil # 使用ライブラリ名
	addition_command += " #{options}" if options != nil # その他オプション

	# 事前にコンパイルするヘッダ
	if PCH_HEADERS.length > 0 then
		# ディレクトリを指定しているか
		def is_dir_pch(p)
			#p.index("/**") != nil
			/.+\/\*\*/ =~ p
		end
		pch_headers = PCH_HEADERS.map do |e|
			if is_dir_pch e then
				# ディレクトリを指定している場合は配列で返してあとで一次配列
				["#{e}.h", "#{e}.hpp"]
			else
				# ファイルはそのまま
				e
			end
		end
		flt = pch_headers.flatten
		# ファイルリストで拡張子に対するファイルを持ってくる
		pch = FileList[flt.uniq]

		# タスク実行
		pch.each do |path|
			headers = exec_dep_to_headers path
			gch = "#{path}.gch"
			file gch => [path, headers].flatten do
				sh "#{COMPILER} #{path}"
			end
			file(gch).invoke
		end
		# まとめられる…？
		#gch = array_to_join_string pch do |e| e end
		#sh "#{COMPILER} -x c++-header -o a.gch #{gch}"
	end

	# ファイルタスクを生成
	for i in 0...SOURCE_LIST.length
		src_file = SOURCE_LIST[i] # ソースファイル
		obj_file = OBJ_LIST[i] # 中間ファイル
		dep_file = dep_list[i] # 依存関係ファイル
		asm_file = asm_list[i] if ASSEMBLY
		# タスクが実行されたか
		is_dep = false

		# 現在のコンパイルしているソースファイルを紅色で出力
		color_print :red do
			print "--- #{src_file}\n"
		end

		# ソースが変更されていたら依存関係ファイルを更新する
		file dep_file => src_file do
			# -MM システムinclude以外の依存include
			# -MT 中間ファイルターゲット名
			# -MF 出力ファイルパス
			sh "#{COMPILER} -E -MM -MT #{obj_file} -MF #{dep_file} #{src_file}"
			is_dep = true
		end
		file(dep_file).invoke

		# 依存ヘッダー配列
		headers = load_dep_to_headers dep_file

		# ソースが変更されていない場合はヘッダが依存しているヘッダーを見る
		if !is_dep and headers.length > 0 then
			file dep_file => headers do
				sh "#{COMPILER} -E -MM -MT #{obj_file} -MF #{dep_file} #{src_file}"
				# 同じもの読み込み防止
				is_dep = true
			end
			file(dep_file).invoke
			# 実行されたらもう一度読み込み
			if is_dep then
				headers = load_dep_to_headers dep_file
			end
		end

		# ソースと依存しているヘッダを見て中間ファイルを作成
		file obj_file => [src_file, headers].flatten do |t|
			# 実行するシェルコマンド
			# -x c++
			command = "#{COMPILER} -c #{src_file} -o #{obj_file}#{addition_command}"
			# シェル実行
			sh command

			# アセンブラファイル作成
			next unless ASSEMBLY
			command += " -S"
			command.gsub! obj_file, asm_file
			sh command
		end
		file(obj_file).invoke
	end
end

#--------------------------------------------------------------------------------
# ビルド後処理
#--------------------------------------------------------------------------------
task :post_build do
	next if start_time == nil

	line = "#{"-"*50}\n"
	print line
	print "build time: #{Time.now - start_time}s\n"
	print line

	start_time = nil
end

#--------------------------------------------------------------------------------
# 実行ファイル作成
#--------------------------------------------------------------------------------
file EXECUTE_FILE => OBJ_LIST do |t|
	command = "#{COMPILER} -o #{EXECUTE_FILE} #{t.prerequisites.join " "}"
	command += " #{auto_include}" if auto_include != nil
	command += " #{defines}" if defines != nil
	command += " #{define_values}" if define_values != nil
	command += " #{undefines}" if undefines != nil
	command += " #{inc}" if inc != nil
	command += " #{lib}" if lib != nil
	command += " #{lib_name}" if lib_name != nil
	command += " #{options}" if options != nil
	sh command
end
