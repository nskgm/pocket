#ifndef __POCKET_BEHAVIOR_H__
#define __POCKET_BEHAVIOR_H__

#include "config.h"
#ifdef POCKET_USE_PRAGMA_ONCE
#pragma once
#endif // POCKET_USE_PRAGMA_ONCE

namespace pocket
{
namespace behavior
{
POCKET_DECL_ONCE_ARGMENT_TAG(noinitialize);
POCKET_DECL_ONCE_ARGMENT_TAG(zero);
POCKET_DECL_ONCE_ARGMENT_TAG(one);
POCKET_DECL_ONCE_ARGMENT_TAG(half);
POCKET_DECL_ONCE_ARGMENT_TAG(half_of_half);
POCKET_DECL_ONCE_ARGMENT_TAG(identity);

POCKET_DECL_ONCE_ARGMENT_TAG(plus);
POCKET_DECL_ONCE_ARGMENT_TAG(negate);
POCKET_DECL_ONCE_ARGMENT_TAG(add);
POCKET_DECL_ONCE_ARGMENT_TAG(add_assign);
POCKET_DECL_ONCE_ARGMENT_TAG(sub);
POCKET_DECL_ONCE_ARGMENT_TAG(sub_assign);
POCKET_DECL_ONCE_ARGMENT_TAG(mul);
POCKET_DECL_ONCE_ARGMENT_TAG(mul_assign);
POCKET_DECL_ONCE_ARGMENT_TAG(div);
POCKET_DECL_ONCE_ARGMENT_TAG(div_assign);
POCKET_DECL_ONCE_ARGMENT_TAG(rem);
POCKET_DECL_ONCE_ARGMENT_TAG(rem_assign);

POCKET_DECL_ONCE_ARGMENT_TAG(increment);
POCKET_DECL_ONCE_ARGMENT_TAG(increment_back);
POCKET_DECL_ONCE_ARGMENT_TAG(decrement);
POCKET_DECL_ONCE_ARGMENT_TAG(decrement_back);

POCKET_DECL_ONCE_ARGMENT_TAG(at);
POCKET_DECL_ONCE_ARGMENT_TAG(pointer);

POCKET_DECL_ONCE_ARGMENT_TAG(x);
POCKET_DECL_ONCE_ARGMENT_TAG(y);
POCKET_DECL_ONCE_ARGMENT_TAG(z);

POCKET_DECL_ONCE_ARGMENT_TAG(roll);
POCKET_DECL_ONCE_ARGMENT_TAG(yaw);
POCKET_DECL_ONCE_ARGMENT_TAG(pitch);
POCKET_DECL_ONCE_ARGMENT_TAG(roll_pitch_yaw);

#ifdef POCKET_USE_CXX11
POCKET_DECL_ONCE_ARGMENT_TAG(sqr);
POCKET_DECL_ONCE_ARGMENT_TAG(radians);
POCKET_DECL_ONCE_ARGMENT_TAG(degrees);
POCKET_DECL_ONCE_ARGMENT_TAG(sin);
POCKET_DECL_ONCE_ARGMENT_TAG(cos);
POCKET_DECL_ONCE_ARGMENT_TAG(tan);
POCKET_DECL_ONCE_ARGMENT_TAG(asin);
POCKET_DECL_ONCE_ARGMENT_TAG(acos);
POCKET_DECL_ONCE_ARGMENT_TAG(atan);
POCKET_DECL_ONCE_ARGMENT_TAG(sin_cos);

POCKET_DECL_ONCE_ARGMENT_TAG(round);
POCKET_DECL_ONCE_ARGMENT_TAG(abs);
POCKET_DECL_ONCE_ARGMENT_TAG(ceil);
POCKET_DECL_ONCE_ARGMENT_TAG(floor);
POCKET_DECL_ONCE_ARGMENT_TAG(sqrt);
POCKET_DECL_ONCE_ARGMENT_TAG(pot);
POCKET_DECL_ONCE_ARGMENT_TAG(is_pot);
POCKET_DECL_ONCE_ARGMENT_TAG(clamp01);

POCKET_DECL_ONCE_ARGMENT_TAG(vec2);
POCKET_DECL_ONCE_ARGMENT_TAG(vec3);
POCKET_DECL_ONCE_ARGMENT_TAG(vec4);
#endif // POCKET_USE_CXX11

POCKET_DECL_ONCE_ARGMENT_TAG(equal);
POCKET_DECL_ONCE_ARGMENT_TAG(not_equal);
POCKET_DECL_ONCE_ARGMENT_TAG(near);
POCKET_DECL_ONCE_ARGMENT_TAG(near_zero);
POCKET_DECL_ONCE_ARGMENT_TAG(length);
POCKET_DECL_ONCE_ARGMENT_TAG(length_square);
POCKET_DECL_ONCE_ARGMENT_TAG(dot);
POCKET_DECL_ONCE_ARGMENT_TAG(normalize);
POCKET_DECL_ONCE_ARGMENT_TAG(normalized);
POCKET_DECL_ONCE_ARGMENT_TAG(cross);
POCKET_DECL_ONCE_ARGMENT_TAG(lerp);
POCKET_DECL_ONCE_ARGMENT_TAG(distance);
POCKET_DECL_ONCE_ARGMENT_TAG(direction);
POCKET_DECL_ONCE_ARGMENT_TAG(saturate);
POCKET_DECL_ONCE_ARGMENT_TAG(saturated);
POCKET_DECL_ONCE_ARGMENT_TAG(swizzle);

POCKET_DECL_ONCE_ARGMENT_TAG(inner);
POCKET_DECL_ONCE_ARGMENT_TAG(angle);
POCKET_DECL_ONCE_ARGMENT_TAG(from_angle);

POCKET_DECL_ONCE_ARGMENT_TAG(from_pitch_yaw);
POCKET_DECL_ONCE_ARGMENT_TAG(transform);
POCKET_DECL_ONCE_ARGMENT_TAG(transform_coord);
POCKET_DECL_ONCE_ARGMENT_TAG(transform_normal);
POCKET_DECL_ONCE_ARGMENT_TAG(rotate);

POCKET_DECL_ONCE_ARGMENT_TAG(dot_normal);
POCKET_DECL_ONCE_ARGMENT_TAG(dot_coord);
POCKET_DECL_ONCE_ARGMENT_TAG(from_points);
POCKET_DECL_ONCE_ARGMENT_TAG(from_normal_point);
POCKET_DECL_ONCE_ARGMENT_TAG(point);
POCKET_DECL_ONCE_ARGMENT_TAG(intersect);
POCKET_DECL_ONCE_ARGMENT_TAG(intersect_line);
POCKET_DECL_ONCE_ARGMENT_TAG(intersect_ray);

POCKET_DECL_ONCE_ARGMENT_TAG(from_axis_angle);
POCKET_DECL_ONCE_ARGMENT_TAG(from_matrix);
POCKET_DECL_ONCE_ARGMENT_TAG(conjugate);
POCKET_DECL_ONCE_ARGMENT_TAG(axis);
POCKET_DECL_ONCE_ARGMENT_TAG(slerp);

POCKET_DECL_ONCE_ARGMENT_TAG(right);
POCKET_DECL_ONCE_ARGMENT_TAG(left);
POCKET_DECL_ONCE_ARGMENT_TAG(up);
POCKET_DECL_ONCE_ARGMENT_TAG(down);
POCKET_DECL_ONCE_ARGMENT_TAG(back);
POCKET_DECL_ONCE_ARGMENT_TAG(front);

POCKET_DECL_ONCE_ARGMENT_TAG(position);
POCKET_DECL_ONCE_ARGMENT_TAG(scale);
POCKET_DECL_ONCE_ARGMENT_TAG(translate);
POCKET_DECL_ONCE_ARGMENT_TAG(world);
POCKET_DECL_ONCE_ARGMENT_TAG(perspective_field_of_view);
POCKET_DECL_ONCE_ARGMENT_TAG(orthographics);
POCKET_DECL_ONCE_ARGMENT_TAG(orthographics2d);
POCKET_DECL_ONCE_ARGMENT_TAG(look_to);
POCKET_DECL_ONCE_ARGMENT_TAG(look_at);
POCKET_DECL_ONCE_ARGMENT_TAG(transpose);
POCKET_DECL_ONCE_ARGMENT_TAG(transposed);
POCKET_DECL_ONCE_ARGMENT_TAG(determinant);

POCKET_DECL_ONCE_ARGMENT_TAG(inverse);
} // namespace behavior
} // namespace pocket

#endif // __POCKET_BEHAVIOR_H__
