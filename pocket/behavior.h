#ifndef __POCKET_BEHAVIOR_H__
#define __POCKET_BEHAVIOR_H__

#include "config.h"
#ifdef _USE_PRAGMA_ONCE
#pragma once
#endif // _USE_PRAGMA_ONCE

namespace pocket
{
namespace behavior
{
_DECL_ONCE_ARGMENT_TAG(noinitialize);
_DECL_ONCE_ARGMENT_TAG(zero);
_DECL_ONCE_ARGMENT_TAG(one);
_DECL_ONCE_ARGMENT_TAG(half);
_DECL_ONCE_ARGMENT_TAG(half_of_half);
_DECL_ONCE_ARGMENT_TAG(identity);

_DECL_ONCE_ARGMENT_TAG(plus);
_DECL_ONCE_ARGMENT_TAG(negate);
_DECL_ONCE_ARGMENT_TAG(add);
_DECL_ONCE_ARGMENT_TAG(add_assign);
_DECL_ONCE_ARGMENT_TAG(sub);
_DECL_ONCE_ARGMENT_TAG(sub_assign);
_DECL_ONCE_ARGMENT_TAG(mul);
_DECL_ONCE_ARGMENT_TAG(mul_assign);
_DECL_ONCE_ARGMENT_TAG(div);
_DECL_ONCE_ARGMENT_TAG(div_assign);
_DECL_ONCE_ARGMENT_TAG(rem);
_DECL_ONCE_ARGMENT_TAG(rem_assign);

_DECL_ONCE_ARGMENT_TAG(increment);
_DECL_ONCE_ARGMENT_TAG(increment_back);
_DECL_ONCE_ARGMENT_TAG(decrement);
_DECL_ONCE_ARGMENT_TAG(decrement_back);

_DECL_ONCE_ARGMENT_TAG(at);
_DECL_ONCE_ARGMENT_TAG(pointer);

_DECL_ONCE_ARGMENT_TAG(x);
_DECL_ONCE_ARGMENT_TAG(y);
_DECL_ONCE_ARGMENT_TAG(z);

_DECL_ONCE_ARGMENT_TAG(roll);
_DECL_ONCE_ARGMENT_TAG(yaw);
_DECL_ONCE_ARGMENT_TAG(pitch);
_DECL_ONCE_ARGMENT_TAG(roll_pitch_yaw);

#ifdef _USE_CXX11
_DECL_ONCE_ARGMENT_TAG(sqr);
_DECL_ONCE_ARGMENT_TAG(radians);
_DECL_ONCE_ARGMENT_TAG(degrees);
_DECL_ONCE_ARGMENT_TAG(sin);
_DECL_ONCE_ARGMENT_TAG(cos);
_DECL_ONCE_ARGMENT_TAG(tan);
_DECL_ONCE_ARGMENT_TAG(asin);
_DECL_ONCE_ARGMENT_TAG(acos);
_DECL_ONCE_ARGMENT_TAG(atan);
_DECL_ONCE_ARGMENT_TAG(sin_cos);

_DECL_ONCE_ARGMENT_TAG(round);
_DECL_ONCE_ARGMENT_TAG(abs);
_DECL_ONCE_ARGMENT_TAG(ceil);
_DECL_ONCE_ARGMENT_TAG(floor);
_DECL_ONCE_ARGMENT_TAG(sqrt);
_DECL_ONCE_ARGMENT_TAG(pot);
_DECL_ONCE_ARGMENT_TAG(is_pot);
_DECL_ONCE_ARGMENT_TAG(clamp01);

_DECL_ONCE_ARGMENT_TAG(vec2);
_DECL_ONCE_ARGMENT_TAG(vec3);
_DECL_ONCE_ARGMENT_TAG(vec4);
#endif // _USE_CXX11

_DECL_ONCE_ARGMENT_TAG(equal);
_DECL_ONCE_ARGMENT_TAG(not_equal);
_DECL_ONCE_ARGMENT_TAG(near);
_DECL_ONCE_ARGMENT_TAG(near_zero);
_DECL_ONCE_ARGMENT_TAG(length);
_DECL_ONCE_ARGMENT_TAG(length_square);
_DECL_ONCE_ARGMENT_TAG(dot);
_DECL_ONCE_ARGMENT_TAG(normalize);
_DECL_ONCE_ARGMENT_TAG(normalized);
_DECL_ONCE_ARGMENT_TAG(cross);
_DECL_ONCE_ARGMENT_TAG(lerp);
_DECL_ONCE_ARGMENT_TAG(distance);
_DECL_ONCE_ARGMENT_TAG(direction);
_DECL_ONCE_ARGMENT_TAG(saturate);
_DECL_ONCE_ARGMENT_TAG(saturated);
_DECL_ONCE_ARGMENT_TAG(swizzle);

_DECL_ONCE_ARGMENT_TAG(inner);
_DECL_ONCE_ARGMENT_TAG(angle);
_DECL_ONCE_ARGMENT_TAG(from_angle);

_DECL_ONCE_ARGMENT_TAG(from_pitch_yaw);
_DECL_ONCE_ARGMENT_TAG(transform);
_DECL_ONCE_ARGMENT_TAG(transform_coord);
_DECL_ONCE_ARGMENT_TAG(transform_normal);
_DECL_ONCE_ARGMENT_TAG(rotate);

_DECL_ONCE_ARGMENT_TAG(dot_normal);
_DECL_ONCE_ARGMENT_TAG(dot_coord);
_DECL_ONCE_ARGMENT_TAG(from_points);
_DECL_ONCE_ARGMENT_TAG(from_normal_point);
_DECL_ONCE_ARGMENT_TAG(point);
_DECL_ONCE_ARGMENT_TAG(intersect);
_DECL_ONCE_ARGMENT_TAG(intersect_line);
_DECL_ONCE_ARGMENT_TAG(intersect_ray);

_DECL_ONCE_ARGMENT_TAG(from_axis_angle);
_DECL_ONCE_ARGMENT_TAG(from_matrix);
_DECL_ONCE_ARGMENT_TAG(conjugate);
_DECL_ONCE_ARGMENT_TAG(axis);
_DECL_ONCE_ARGMENT_TAG(slerp);

_DECL_ONCE_ARGMENT_TAG(right);
_DECL_ONCE_ARGMENT_TAG(left);
_DECL_ONCE_ARGMENT_TAG(up);
_DECL_ONCE_ARGMENT_TAG(down);
_DECL_ONCE_ARGMENT_TAG(back);
_DECL_ONCE_ARGMENT_TAG(front);

_DECL_ONCE_ARGMENT_TAG(position);
_DECL_ONCE_ARGMENT_TAG(scale);
_DECL_ONCE_ARGMENT_TAG(translate);
_DECL_ONCE_ARGMENT_TAG(world);
_DECL_ONCE_ARGMENT_TAG(perspective_field_of_view);
_DECL_ONCE_ARGMENT_TAG(orthographics);
_DECL_ONCE_ARGMENT_TAG(orthographics2d);
_DECL_ONCE_ARGMENT_TAG(look_to);
_DECL_ONCE_ARGMENT_TAG(look_at);
_DECL_ONCE_ARGMENT_TAG(transpose);
_DECL_ONCE_ARGMENT_TAG(transposed);
_DECL_ONCE_ARGMENT_TAG(determinant);

_DECL_ONCE_ARGMENT_TAG(inverse);
} // namespace behavior
} // namespace pocket

#endif // __POCKET_BEHAVIOR_H__
